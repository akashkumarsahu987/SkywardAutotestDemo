# SicsBatchJobTest project:
# This is a COPY of log4j.properties in scheduler_installfolder/conf, and will override the original config in the conf dir.
# This config has an additional config for the Batch Test classes, see the end of the file.

###########################################################################
# NOTE: This is the *** R&D INTERNAL *** runtime configuration for SICS Workstation and System Administration Utility.
# NOTE: The DEVELOPMENT configuration for SICS Workstation and System Administration Utility is stored in sics.dev/conf. 
# NOTE: The DELIVERED configuration for SICS Workstation and System Administration Utility is stored in sics.dev/delivery/conf. 
# NOTE: The configuration for SICS Server is stored in SwanLake/src/resources/log4j.xml and is the same for development and runtime.

#
# Additional conversion characters for use in ConversionPattern:
#  %X{userId}   the name of the OS user who is logged on to the computer where SICS runs 
#  %X{ip}       the IP address of the computer where SICS runs (this may not work in environments with "complicated" networking)
############################################################################

#By default only log WARN and more serious log events
log4j.rootLogger=INFO, console

# Console appender definition, print to the java console
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.EnhancedPatternLayout
#NB: Timestamps in GMT to be consistent with SICS dates
log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}{GMT+0}Z %-5p %c{1} - %m %n

# Console appender definition for generic SICS messages. This appender does not print the log level (priority), as it would be redundant information.
log4j.appender.generic=org.apache.log4j.ConsoleAppender
log4j.appender.generic.layout=org.apache.log4j.EnhancedPatternLayout
#NB: Timestamps in GMT to be consistent with SICS dates
log4j.appender.generic.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}{GMT+0}Z %c - %m %n

#Example appender for logging performance data for the user
#log4j.appender.performance=com.csc.sics.log4j.RollingUserFileAppender
#log4j.appender.performance.layout=org.apache.log4j.EnhancedPatternLayout
#log4j.appender.performance.file=performance.txt
#NB: Timestamps in GMT to be consistent with SICS dates
#log4j.appender.performance.layout.ConversionPattern=%d{yyyy-MM-dd-HH:mm:ss,SSS}{GMT+0}Z %c %m %n

# Walkback appender definition - Use this to add logs to the Walkback file
log4j.appender.walkback=com.csc.cnu.exceptionhandler.WalkbackAppender
#NB if the capacity isn't set, or is set to 0 then the logs grow unrestricted.
log4j.appender.walkback.capacity=1000
log4j.appender.walkback.layout=org.apache.log4j.EnhancedPatternLayout
#NB: Timestamps in GMT to be consistent with SICS dates
log4j.appender.walkback.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}{GMT+0}Z %-5p %c{1} - %m %n

# file appender definition
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.file.File=transcript.log
log4j.appender.file.MaxFileSize=100MB
log4j.appender.file.MaxBackupIndex=100
#NB: Timestamps in GMT to be consistent with SICS dates
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}{GMT+0}Z %-5p %c{1} - %m %n

# user based file appender for use in shared installations (ie: where more than one user is sharing the same installed folder)
# by default this will create a separate log file for each user who runs SICS. the user name is prefixed to the file name.
# appenders available are com.csc.sics.log4j.RollingUserFileAppender & com.csc.sics.log4j.DailyRollingUserFileAppender
#log4j.appender.userFile=com.csc.sics.log4j.DailyRollingUserFileAppender
#log4j.appender.userFile.layout=org.apache.log4j.PatternLayout
#log4j.appender.userFile.File=transcript.log
#log4j.appender.userFile.MaxFileSize=100MB
#log4j.appender.userFile.MaxBackupIndex=100
# uncomment this and enter the exact user id that you want to restrict logging to. Other users will not create a log file
#log4j.appender.userFile.User=
#log4j.appender.userFile.layout.ConversionPattern=%d %-5p %c{1} - %m %n

# sql appender definition
# All SQL logging goes to this file.
log4j.appender.sql=org.apache.log4j.RollingFileAppender
log4j.appender.sql.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.sql.File=transcript.log
log4j.appender.sql.MaxFileSize=100MB
log4j.appender.sql.MaxBackupIndex=100
#NB: Timestamps in GMT to be consistent with SICS dates
log4j.appender.sql.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}{GMT+0}Z %-5p %c{1} - %m %n
#----------------------------------------------------------------------------------------

#	Generic logging, used by SICS when a specific logger is not implemented.
#	These loggers should normally be enabled.
#	The distiction between informational, warning and error messages is somewhat diffuse,
#	and messages may be logged to a logger different from what the end-user might expect.
#	For example, there is no guarantee that all 'errors' are logged to the SICS_ERROR logger.
#	By default, these loggers all use a console appender named 'generic'.
#	It is possible, however, to use individual appenders for these loggers.
log4j.logger.SICS_INFO=INFO, generic
log4j.logger.SICS_WARNING=WARN, generic
log4j.logger.SICS_ERROR=ERROR, generic
log4j.additivity.SICS_INFO=false
log4j.additivity.SICS_WARNING=false
log4j.additivity.SICS_ERROR=false

log4j.logger.com.csc.sics.framework.gui.exception.SicsGuiExceptionHandler=ERROR

#TROLL
log4j.logger.com.csc.troll=OFF
log4j.logger.com.csc.troll.accessor.AbstractDatabaseAccessor=OFF
log4j.logger.com.csc.troll.accessor.JDBCDatabaseAccessor$PreparedStatementCache=OFF

#Use the SQL logger for logging of all SQL statements.
#Set level to DEBUG for logging of all SQL before execution.
#Set level to TRACE for logging of all SQL before and after execution, for timing purposes.
#The SQL logging goes to the 'sql' appender (see definition at top of this file).
#Normally, each SQL statement is output in its entirity.
#However, if the AbbreviateSqlRenderer is activated (see below),
#  then SELECT statements will be output with '...' replacing the (potentially long) list of columns.
#log4j.logger.com.csc.troll.SQL=DEBUG, sql

#Use the SQL_BUILD logger for logging the time it takes to build Java domain objects from the database rows retrieved by a SQL statement.
#Set level to TRACE for logging the time.
#The SQL_BUILD logging goes to the 'sql' appender (see definition at top of this file).
#log4j.logger.com.csc.troll.SQL_BUILD=TRACE, sql

#Set SQLPARAM to DEBUG for logging of SQL parameters when using parameterized SQL.
#The parameter logging goes to the 'sql' appender (see definition at top of this file).
#log4j.logger.com.csc.troll.SQLPARAM=DEBUG, sql

#The SQL_PC logger is used for logging under program control and ad-hoc user control.
#This is known as 'logSQL', 'showSQL' and 'traceSQL'.
#The 'logSQL' option gives logging before execution. This option is purely controlled by SICS program logic.
#The 'showSQL' option gives logging before execution. This option is ad-hoc user-controlled.
#The 'traceSQL' option gives logging before and after execution, for timing purposes. This option is ad-hoc user-controlled.
#The 'logSQL' option will be automatically activated programmatically by certain SICS functions (for example, when writing a database patch to file).
#The 'showSQL' option can be activated  by the user from the SICS desktop, when choosing menu option Help - About, and then System Info... - Logging.
#The 'traceSQL' option can be activated in the same way as 'showSQL'.
#This logger must always be active and set to INFO. Else the above mentioned logging will not take place
#  and this will disrupt normal SICS behavior.
#All SQL statements will be logged according to the active option.
#For the 'logSQL' option, the SQL logging goes to the 'sql' appender (see definition at top of this file).
#For the 'showSQL' and 'traceSQL' options, logging goes to the file specified by the user from the SICS desktop,
#  when choosing menu option Help - About, and then System Info... - Logging.
#Normally, each SQL statement is output in its entirity.
#However, if the AbbreviateSqlRenderer is activated (see below),
#  then SELECT statements will be output with '...' replacing the (potentially long) list of columns.
log4j.logger.com.csc.troll.SQL_PC=INFO, sql

#Uncomment this renderer if you want abbreviated SQL output
#log4j.renderer.com.csc.troll.SqlString=com.csc.troll.log4j.AbbreviateSqlRenderer

#Set Level to DEBUG for logging of UnitOfWork events like commit, rollback, login, logout, etc.
#All SQL logging goes to the sql appender, see definition at top of this file.
log4j.logger.com.csc.troll.UOW=OFF, sql

#Just log to my appender and to not forward to the root logger
log4j.additivity.com.csc.troll.SQL=false
log4j.additivity.com.csc.troll.SQL_BUILD=false
log4j.additivity.com.csc.troll.SQLPARAM=false
log4j.additivity.com.csc.troll.SQL_PC=false
log4j.additivity.com.csc.troll.UOW=false

#STROLL
log4j.logger.com.csc.sics.troll=ERROR
log4j.logger.TableDescriptorBuilder=ERROR

log4j.logger.SICSClassLoader=INFO

#eMessaging
log4j.logger.emessaging=OFF 
#log4j.logger.emessaging=INFO, emessaging 
#log4j.appender.emessaging=org.apache.log4j.RollingFileAppender
#log4j.appender.emessaging.layout=org.apache.log4j.PatternLayout
#log4j.appender.emessaging.File=emessaging.log
#log4j.appender.emessaging.layout.ConversionPattern=%d - %m%n
#log4j.additivity.emessaging=false

#eMessaging routing component (this is an optional component which may be run from the Batch Scheduler)
#log4j.logger.com.csc.sics.emessaging.integration.Routing=DEBUG

# SICS Search logging
log4j.logger.SICSSearch=OFF

#Log performance data
#Performance appender at top of file must be enabled
#log4j.logger.Performance=INFO, performance
#log4j.additivity.Performance=false

#	Accounting order processing
log4j.logger.AccountingOrder=INFO

#	Task Management Expression Evaluation
log4j.logger.TaskManagementExpression=OFF

#	Automated Document Handling
log4j.logger.AutomatedDocumentHandling=OFF

#	Database access MXBean statistics.
#	Set to OFF for no statistics.
#	Set to TRACE for microsecond precision statistics. This will have some performance impact.
#log4j.logger.com.csc.troll.MX_STATISTICS=OFF

#	Long running activities with a progress monitor, including scheduled jobs
#	Set to OFF for no logging. 
#   Set to INFO for progress logging.
#   Set to DEBUG for low level logging.
log4j.logger.ProgressMonitor=OFF


###################################################
# ADDED CONFIG FOR PROJECT 'SicsBatchJobTest' just appending to the console appender
#
log4j.logger.com.csc.sics.batchtest=DEBUG, console
log4j.additivity.com.csc.sics.batchtest=false
# Additional file appender that (only) writes database verification errors to file: "logs/errors.log" for easy inspection later
log4j.logger.batchTestVerificationErrorLogger=ERROR, batchTestVerificationErrorFileAppender
log4j.appender.batchTestVerificationErrorFileAppender=org.apache.log4j.RollingFileAppender
log4j.appender.batchTestVerificationErrorFileAppender.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.batchTestVerificationErrorFileAppender.File=../logs/errors.log
log4j.appender.batchTestVerificationErrorFileAppender.MaxFileSize=1MB
log4j.appender.batchTestVerificationErrorFileAppender.MaxBackupIndex=100
#NB: Timestamps in GMT to be consistent with SICS dates
log4j.appender.batchtesterror.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}{GMT+0}Z %-5p %c{1} - %m %n
#
###################################################